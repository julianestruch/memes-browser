const { connectDB, testConnection } = require('../config/database');
const Clip = require('../models/Clip');
require('dotenv').config();

/**
 * Script para configurar MongoDB y crear √≠ndices
 */
async function setupMongoDB() {
  try {
    console.log('üöÄ Iniciando configuraci√≥n de MongoDB...');
    
    // Conectar a MongoDB
    await connectDB();
    
    // Probar conexi√≥n
    await testConnection();
    
    // Crear √≠ndices para optimizar b√∫squedas
    console.log('üîç Creando √≠ndices...');
    
    // √çndice de texto para b√∫squedas por texto
    await Clip.collection.createIndex(
      { title: 'text', description: 'text', persons: 'text', combined_text: 'text' },
      { name: 'text_search_index' }
    );
    console.log('‚úÖ √çndice de texto creado');
    
    // √çndice para b√∫squedas por fecha
    await Clip.collection.createIndex({ created_at: -1 }, { name: 'created_at_index' });
    console.log('‚úÖ √çndice de fecha creado');
    
    // √çndice para Cloudinary public_id
    await Clip.collection.createIndex({ cloudinary_public_id: 1 }, { name: 'cloudinary_index' });
    console.log('‚úÖ √çndice de Cloudinary creado');
    
    // √çndice para embedding (si existe)
    await Clip.collection.createIndex({ embedding: 1 }, { name: 'embedding_index' });
    console.log('‚úÖ √çndice de embedding creado');
    
    // √çndices para el panel de administrador
    await Clip.collection.createIndex({ status: 1 }, { name: 'status_index' });
    console.log('‚úÖ √çndice de status creado');
    
    await Clip.collection.createIndex({ status: 1, created_at: -1 }, { name: 'status_created_at_index' });
    console.log('‚úÖ √çndice de status y fecha creado');
    
    await Clip.collection.createIndex({ approved_at: -1 }, { name: 'approved_at_index' });
    console.log('‚úÖ √çndice de fecha de aprobaci√≥n creado');
    
    // Verificar que los √≠ndices se crearon correctamente
    console.log('üîç Verificando √≠ndices...');
    const indexes = await Clip.collection.indexes();
    console.log('üìä √çndices creados:');
    indexes.forEach(index => {
      console.log(`  - ${index.name}: ${JSON.stringify(index.key)}`);
    });
    
    // Contar documentos existentes
    const totalClips = await Clip.countDocuments();
    console.log(`üìà Total de clips en la base de datos: ${totalClips}`);
    
    console.log('üéâ Configuraci√≥n de MongoDB completada exitosamente!');
    console.log('');
    console.log('üìù Pr√≥ximos pasos:');
    console.log('   1. Aseg√∫rate de que FFmpeg est√© instalado en tu sistema');
    console.log('   2. Configura tu API key de OpenAI en el archivo .env');
    console.log('   3. (Opcional) Configura Cloudinary para almacenamiento en la nube');
    console.log('   4. Ejecuta "npm run dev" para iniciar el servidor');
    
  } catch (error) {
    console.error('‚ùå Error en la configuraci√≥n de MongoDB:', error);
    process.exit(1);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  setupMongoDB()
    .then(() => {
      console.log('‚úÖ Script completado');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Script fall√≥:', error);
      process.exit(1);
    });
}

module.exports = { setupMongoDB }; 